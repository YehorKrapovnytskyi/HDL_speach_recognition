// -------------------------------------------------------------
// 
// File Name: ..\..\hw\CIC_decimator_HDL_model\FIR_compensator.v
// Created: 2022-05-20 22:52:52
// 
// Generated by MATLAB 9.5 and HDL Coder 3.13
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: FIR_compensator
// Source Path: CIC_decimator_HDL_model/CIC_decimator_HDL_model/FIR_compensator
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module FIR_compensator
          (i_clk,
           i_rst_n,
           enb,
           i_data,
           i_en,
           o_data);


  input   i_clk;
  input   i_rst_n;
  input   enb;
  input   signed [14:0] i_data;  // sfix15
  input   i_en;
  output  signed [30:0] o_data;  // sfix31


  reg  [0:1] delayMatch2_reg;  // ufix1 [2]
  wire [0:1] delayMatch2_reg_next;  // ufix1 [2]
  wire i_en_1;
  wire signed [15:0] kconst;  // sfix16
  reg signed [15:0] kconst_1;  // sfix16
  reg signed [14:0] Unit_Delay_Enabled_Synchronous21_out1;  // sfix15
  wire signed [14:0] Unit_Delay_Enabled_Synchronous21_ectrl;  // sfix15
  reg signed [14:0] Unit_Delay_Enabled_Synchronous_out1;  // sfix15
  wire signed [14:0] Unit_Delay_Enabled_Synchronous_ectrl;  // sfix15
  reg signed [14:0] Unit_Delay_Enabled_Synchronous1_out1;  // sfix15
  wire signed [14:0] Unit_Delay_Enabled_Synchronous1_ectrl;  // sfix15
  reg signed [14:0] Unit_Delay_Enabled_Synchronous2_out1;  // sfix15
  wire signed [14:0] Unit_Delay_Enabled_Synchronous2_ectrl;  // sfix15
  reg signed [14:0] Unit_Delay_Enabled_Synchronous3_out1;  // sfix15
  wire signed [14:0] Unit_Delay_Enabled_Synchronous3_ectrl;  // sfix15
  reg signed [14:0] Unit_Delay_Enabled_Synchronous4_out1;  // sfix15
  wire signed [14:0] Unit_Delay_Enabled_Synchronous4_ectrl;  // sfix15
  reg signed [14:0] Unit_Delay_Enabled_Synchronous5_out1;  // sfix15
  wire signed [14:0] Unit_Delay_Enabled_Synchronous5_ectrl;  // sfix15
  reg signed [14:0] Unit_Delay_Enabled_Synchronous6_out1;  // sfix15
  wire signed [14:0] Unit_Delay_Enabled_Synchronous6_ectrl;  // sfix15
  reg signed [14:0] Unit_Delay_Enabled_Synchronous7_out1;  // sfix15
  wire signed [14:0] Unit_Delay_Enabled_Synchronous7_ectrl;  // sfix15
  reg signed [14:0] Unit_Delay_Enabled_Synchronous8_out1;  // sfix15
  wire signed [14:0] Unit_Delay_Enabled_Synchronous8_ectrl;  // sfix15
  reg signed [14:0] Unit_Delay_Enabled_Synchronous9_out1;  // sfix15
  wire signed [14:0] Unit_Delay_Enabled_Synchronous9_ectrl;  // sfix15
  reg signed [14:0] Unit_Delay_Enabled_Synchronous10_out1;  // sfix15
  wire signed [14:0] Unit_Delay_Enabled_Synchronous10_ectrl;  // sfix15
  reg signed [14:0] Unit_Delay_Enabled_Synchronous11_out1;  // sfix15
  wire signed [14:0] Unit_Delay_Enabled_Synchronous11_ectrl;  // sfix15
  reg signed [14:0] Unit_Delay_Enabled_Synchronous12_out1;  // sfix15
  wire signed [14:0] Unit_Delay_Enabled_Synchronous12_ectrl;  // sfix15
  reg signed [14:0] Unit_Delay_Enabled_Synchronous13_out1;  // sfix15
  wire signed [14:0] Unit_Delay_Enabled_Synchronous13_ectrl;  // sfix15
  reg signed [14:0] Unit_Delay_Enabled_Synchronous14_out1;  // sfix15
  wire signed [14:0] Unit_Delay_Enabled_Synchronous14_ectrl;  // sfix15
  reg signed [14:0] Unit_Delay_Enabled_Synchronous15_out1;  // sfix15
  wire signed [14:0] Unit_Delay_Enabled_Synchronous15_ectrl;  // sfix15
  reg signed [14:0] Unit_Delay_Enabled_Synchronous16_out1;  // sfix15
  wire signed [14:0] Unit_Delay_Enabled_Synchronous16_ectrl;  // sfix15
  reg signed [14:0] Unit_Delay_Enabled_Synchronous17_out1;  // sfix15
  wire signed [14:0] Unit_Delay_Enabled_Synchronous17_ectrl;  // sfix15
  reg signed [14:0] Unit_Delay_Enabled_Synchronous18_out1;  // sfix15
  wire signed [14:0] Unit_Delay_Enabled_Synchronous18_ectrl;  // sfix15
  reg signed [14:0] Unit_Delay_Enabled_Synchronous18_out1_1;  // sfix15
  wire signed [30:0] b_20_out1;  // sfix31
  wire signed [15:0] kconst_2;  // sfix16
  reg signed [15:0] kconst_3;  // sfix16
  reg signed [14:0] Unit_Delay_Enabled_Synchronous17_out1_1;  // sfix15
  wire signed [30:0] b_19_out1;  // sfix31
  wire signed [15:0] kconst_4;  // sfix16
  reg signed [15:0] kconst_5;  // sfix16
  reg signed [14:0] Unit_Delay_Enabled_Synchronous16_out1_1;  // sfix15
  wire signed [30:0] b_18_out1;  // sfix31
  wire signed [15:0] kconst_6;  // sfix16
  reg signed [15:0] kconst_7;  // sfix16
  reg signed [14:0] Unit_Delay_Enabled_Synchronous15_out1_1;  // sfix15
  wire signed [30:0] b_17_out1;  // sfix31
  wire signed [15:0] kconst_8;  // sfix16
  reg signed [15:0] kconst_9;  // sfix16
  reg signed [14:0] Unit_Delay_Enabled_Synchronous14_out1_1;  // sfix15
  wire signed [30:0] b_16_out1;  // sfix31
  wire signed [15:0] kconst_10;  // sfix16
  reg signed [15:0] kconst_11;  // sfix16
  reg signed [14:0] Unit_Delay_Enabled_Synchronous13_out1_1;  // sfix15
  wire signed [30:0] b_15_out1;  // sfix31
  wire signed [15:0] kconst_12;  // sfix16
  reg signed [15:0] kconst_13;  // sfix16
  reg signed [14:0] Unit_Delay_Enabled_Synchronous12_out1_1;  // sfix15
  wire signed [30:0] b_14_out1;  // sfix31
  wire signed [15:0] kconst_14;  // sfix16
  reg signed [15:0] kconst_15;  // sfix16
  reg signed [14:0] Unit_Delay_Enabled_Synchronous11_out1_1;  // sfix15
  wire signed [30:0] b_13_out1;  // sfix31
  wire signed [15:0] kconst_16;  // sfix16
  reg signed [15:0] kconst_17;  // sfix16
  reg signed [14:0] Unit_Delay_Enabled_Synchronous10_out1_1;  // sfix15
  wire signed [30:0] b_12_out1;  // sfix31
  wire signed [15:0] kconst_18;  // sfix16
  reg signed [15:0] kconst_19;  // sfix16
  reg signed [14:0] Unit_Delay_Enabled_Synchronous9_out1_1;  // sfix15
  wire signed [30:0] b_11_out1;  // sfix31
  wire signed [15:0] kconst_20;  // sfix16
  reg signed [15:0] kconst_21;  // sfix16
  reg signed [14:0] Unit_Delay_Enabled_Synchronous8_out1_1;  // sfix15
  wire signed [30:0] b_10_out1;  // sfix31
  wire signed [15:0] kconst_22;  // sfix16
  reg signed [15:0] kconst_23;  // sfix16
  reg signed [14:0] Unit_Delay_Enabled_Synchronous7_out1_1;  // sfix15
  wire signed [30:0] b_9_out1;  // sfix31
  wire signed [15:0] kconst_24;  // sfix16
  reg signed [15:0] kconst_25;  // sfix16
  reg signed [14:0] Unit_Delay_Enabled_Synchronous6_out1_1;  // sfix15
  wire signed [30:0] b_8_out1;  // sfix31
  wire signed [15:0] kconst_26;  // sfix16
  reg signed [15:0] kconst_27;  // sfix16
  reg signed [14:0] Unit_Delay_Enabled_Synchronous5_out1_1;  // sfix15
  wire signed [30:0] b_7_out1;  // sfix31
  wire signed [15:0] kconst_28;  // sfix16
  reg signed [15:0] kconst_29;  // sfix16
  reg signed [14:0] Unit_Delay_Enabled_Synchronous4_out1_1;  // sfix15
  wire signed [30:0] b_6_out1;  // sfix31
  wire signed [15:0] kconst_30;  // sfix16
  reg signed [15:0] kconst_31;  // sfix16
  reg signed [14:0] Unit_Delay_Enabled_Synchronous3_out1_1;  // sfix15
  wire signed [30:0] b_5_out1;  // sfix31
  wire signed [15:0] kconst_32;  // sfix16
  reg signed [15:0] kconst_33;  // sfix16
  reg signed [14:0] Unit_Delay_Enabled_Synchronous2_out1_1;  // sfix15
  wire signed [30:0] b_4_out1;  // sfix31
  wire signed [15:0] kconst_34;  // sfix16
  reg signed [15:0] kconst_35;  // sfix16
  reg signed [14:0] Unit_Delay_Enabled_Synchronous1_out1_1;  // sfix15
  wire signed [30:0] b_3_out1;  // sfix31
  wire signed [15:0] kconst_36;  // sfix16
  reg signed [15:0] kconst_37;  // sfix16
  reg signed [14:0] Unit_Delay_Enabled_Synchronous_out1_1;  // sfix15
  wire signed [30:0] b_2_out1;  // sfix31
  reg signed [30:0] b_2_out1_1;  // sfix31
  wire signed [30:0] b_1_out1;  // sfix31
  reg signed [30:0] b_20_out1_1;  // sfix31
  reg signed [30:0] b_19_out1_1;  // sfix31
  reg signed [30:0] b_18_out1_1;  // sfix31
  reg signed [30:0] b_17_out1_1;  // sfix31
  reg signed [30:0] b_16_out1_1;  // sfix31
  reg signed [30:0] b_15_out1_1;  // sfix31
  reg signed [30:0] b_14_out1_1;  // sfix31
  reg signed [30:0] b_13_out1_1;  // sfix31
  reg signed [30:0] b_12_out1_1;  // sfix31
  reg signed [30:0] b_11_out1_1;  // sfix31
  reg signed [30:0] b_10_out1_1;  // sfix31
  reg signed [30:0] b_9_out1_1;  // sfix31
  reg signed [30:0] b_8_out1_1;  // sfix31
  reg signed [30:0] b_7_out1_1;  // sfix31
  reg signed [30:0] b_6_out1_1;  // sfix31
  reg signed [30:0] b_5_out1_1;  // sfix31
  reg signed [30:0] b_4_out1_1;  // sfix31
  reg signed [30:0] b_3_out1_1;  // sfix31
  reg signed [30:0] delayMatch_reg [0:1];  // sfix31 [2]
  wire signed [30:0] delayMatch_reg_next [0:1];  // sfix31 [2]
  wire signed [30:0] b_1_out1_1;  // sfix31
  wire signed [31:0] BodyLSum2_add_temp;  // sfix32
  wire signed [31:0] BodyLSum2_1;  // sfix32
  wire signed [31:0] BodyLSum2_2;  // sfix32
  wire signed [30:0] BodyLSum2_out1;  // sfix31
  wire signed [31:0] BodyLSum3_add_temp;  // sfix32
  wire signed [31:0] BodyLSum3_1;  // sfix32
  wire signed [31:0] BodyLSum3_2;  // sfix32
  wire signed [30:0] BodyLSum3_out1;  // sfix31
  wire signed [31:0] BodyLSum4_add_temp;  // sfix32
  wire signed [31:0] BodyLSum4_1;  // sfix32
  wire signed [31:0] BodyLSum4_2;  // sfix32
  wire signed [30:0] BodyLSum4_out1;  // sfix31
  wire signed [31:0] BodyLSum5_add_temp;  // sfix32
  wire signed [31:0] BodyLSum5_1;  // sfix32
  wire signed [31:0] BodyLSum5_2;  // sfix32
  wire signed [30:0] BodyLSum5_out1;  // sfix31
  wire signed [31:0] BodyLSum6_add_temp;  // sfix32
  wire signed [31:0] BodyLSum6_1;  // sfix32
  wire signed [31:0] BodyLSum6_2;  // sfix32
  wire signed [30:0] BodyLSum6_out1;  // sfix31
  wire signed [31:0] BodyLSum7_add_temp;  // sfix32
  wire signed [31:0] BodyLSum7_1;  // sfix32
  wire signed [31:0] BodyLSum7_2;  // sfix32
  wire signed [30:0] BodyLSum7_out1;  // sfix31
  wire signed [31:0] BodyLSum8_add_temp;  // sfix32
  wire signed [31:0] BodyLSum8_1;  // sfix32
  wire signed [31:0] BodyLSum8_2;  // sfix32
  wire signed [30:0] BodyLSum8_out1;  // sfix31
  wire signed [31:0] BodyLSum9_add_temp;  // sfix32
  wire signed [31:0] BodyLSum9_1;  // sfix32
  wire signed [31:0] BodyLSum9_2;  // sfix32
  wire signed [30:0] BodyLSum9_out1;  // sfix31
  wire signed [31:0] BodyLSum10_add_temp;  // sfix32
  wire signed [31:0] BodyLSum10_1;  // sfix32
  wire signed [31:0] BodyLSum10_2;  // sfix32
  wire signed [30:0] BodyLSum10_out1;  // sfix31
  wire signed [31:0] BodyLSum11_add_temp;  // sfix32
  wire signed [31:0] BodyLSum11_1;  // sfix32
  wire signed [31:0] BodyLSum11_2;  // sfix32
  wire signed [30:0] BodyLSum11_out1;  // sfix31
  wire signed [31:0] BodyLSum12_add_temp;  // sfix32
  wire signed [31:0] BodyLSum12_1;  // sfix32
  wire signed [31:0] BodyLSum12_2;  // sfix32
  wire signed [30:0] BodyLSum12_out1;  // sfix31
  wire signed [31:0] BodyLSum13_add_temp;  // sfix32
  wire signed [31:0] BodyLSum13_1;  // sfix32
  wire signed [31:0] BodyLSum13_2;  // sfix32
  wire signed [30:0] BodyLSum13_out1;  // sfix31
  wire signed [31:0] BodyLSum14_add_temp;  // sfix32
  wire signed [31:0] BodyLSum14_1;  // sfix32
  wire signed [31:0] BodyLSum14_2;  // sfix32
  wire signed [30:0] BodyLSum14_out1;  // sfix31
  wire signed [31:0] BodyLSum15_add_temp;  // sfix32
  wire signed [31:0] BodyLSum15_1;  // sfix32
  wire signed [31:0] BodyLSum15_2;  // sfix32
  wire signed [30:0] BodyLSum15_out1;  // sfix31
  wire signed [31:0] BodyLSum16_add_temp;  // sfix32
  wire signed [31:0] BodyLSum16_1;  // sfix32
  wire signed [31:0] BodyLSum16_2;  // sfix32
  wire signed [30:0] BodyLSum16_out1;  // sfix31
  wire signed [31:0] BodyLSum17_add_temp;  // sfix32
  wire signed [31:0] BodyLSum17_1;  // sfix32
  wire signed [31:0] BodyLSum17_2;  // sfix32
  wire signed [30:0] BodyLSum17_out1;  // sfix31
  wire signed [31:0] BodyLSum18_add_temp;  // sfix32
  wire signed [31:0] BodyLSum18_1;  // sfix32
  wire signed [31:0] BodyLSum18_2;  // sfix32
  wire signed [30:0] BodyLSum18_out1;  // sfix31
  wire signed [31:0] BodyLSum19_add_temp;  // sfix32
  wire signed [31:0] BodyLSum19_1;  // sfix32
  wire signed [31:0] BodyLSum19_2;  // sfix32
  wire signed [30:0] BodyLSum19_out1;  // sfix31
  wire signed [31:0] BodyLSum20_add_temp;  // sfix32
  wire signed [31:0] BodyLSum20_1;  // sfix32
  wire signed [31:0] BodyLSum20_2;  // sfix32
  wire signed [30:0] BodyLSum20_out1;  // sfix31
  reg signed [14:0] Unit_Delay_Enabled_Synchronous19_out1;  // sfix15
  wire signed [14:0] Unit_Delay_Enabled_Synchronous19_ectrl;  // sfix15
  wire signed [30:0] b_21_out1;  // sfix31
  reg signed [30:0] delayMatch1_reg [0:1];  // sfix31 [2]
  wire signed [30:0] delayMatch1_reg_next [0:1];  // sfix31 [2]
  wire signed [30:0] b_21_out1_1;  // sfix31
  wire signed [31:0] BodyLSum21_add_temp;  // sfix32
  wire signed [31:0] BodyLSum21_1;  // sfix32
  wire signed [31:0] BodyLSum21_2;  // sfix32
  wire signed [30:0] BodyLSum21_out1;  // sfix31
  reg signed [30:0] Unit_Delay_Enabled_Synchronous20_out1;  // sfix31
  wire signed [30:0] Unit_Delay_Enabled_Synchronous20_ectrl;  // sfix31


  always @(posedge i_clk or negedge i_rst_n)
    begin : delayMatch2_process
      if (i_rst_n == 1'b0) begin
        delayMatch2_reg[0] <= 1'b0;
        delayMatch2_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          delayMatch2_reg[0] <= delayMatch2_reg_next[0];
          delayMatch2_reg[1] <= delayMatch2_reg_next[1];
        end
      end
    end

  assign i_en_1 = delayMatch2_reg[1];
  assign delayMatch2_reg_next[0] = i_en;
  assign delayMatch2_reg_next[1] = delayMatch2_reg[0];



  assign kconst = 16'sb1111111111110000;



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister22_process
      if (i_rst_n == 1'b0) begin
        kconst_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_1 <= kconst;
        end
      end
    end



  assign Unit_Delay_Enabled_Synchronous21_ectrl = (i_en == 1'b0 ? Unit_Delay_Enabled_Synchronous21_out1 :
              i_data);



  always @(posedge i_clk or negedge i_rst_n)
    begin : Unit_Delay_Enabled_Synchronous21_lowered_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous21_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous21_out1 <= Unit_Delay_Enabled_Synchronous21_ectrl;
        end
      end
    end



  assign Unit_Delay_Enabled_Synchronous_ectrl = (i_en == 1'b0 ? Unit_Delay_Enabled_Synchronous_out1 :
              Unit_Delay_Enabled_Synchronous21_out1);



  always @(posedge i_clk or negedge i_rst_n)
    begin : Unit_Delay_Enabled_Synchronous_lowered_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous_out1 <= Unit_Delay_Enabled_Synchronous_ectrl;
        end
      end
    end



  assign Unit_Delay_Enabled_Synchronous1_ectrl = (i_en == 1'b0 ? Unit_Delay_Enabled_Synchronous1_out1 :
              Unit_Delay_Enabled_Synchronous_out1);



  always @(posedge i_clk or negedge i_rst_n)
    begin : Unit_Delay_Enabled_Synchronous1_lowered_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous1_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous1_out1 <= Unit_Delay_Enabled_Synchronous1_ectrl;
        end
      end
    end



  assign Unit_Delay_Enabled_Synchronous2_ectrl = (i_en == 1'b0 ? Unit_Delay_Enabled_Synchronous2_out1 :
              Unit_Delay_Enabled_Synchronous1_out1);



  always @(posedge i_clk or negedge i_rst_n)
    begin : Unit_Delay_Enabled_Synchronous2_lowered_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous2_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous2_out1 <= Unit_Delay_Enabled_Synchronous2_ectrl;
        end
      end
    end



  assign Unit_Delay_Enabled_Synchronous3_ectrl = (i_en == 1'b0 ? Unit_Delay_Enabled_Synchronous3_out1 :
              Unit_Delay_Enabled_Synchronous2_out1);



  always @(posedge i_clk or negedge i_rst_n)
    begin : Unit_Delay_Enabled_Synchronous3_lowered_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous3_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous3_out1 <= Unit_Delay_Enabled_Synchronous3_ectrl;
        end
      end
    end



  assign Unit_Delay_Enabled_Synchronous4_ectrl = (i_en == 1'b0 ? Unit_Delay_Enabled_Synchronous4_out1 :
              Unit_Delay_Enabled_Synchronous3_out1);



  always @(posedge i_clk or negedge i_rst_n)
    begin : Unit_Delay_Enabled_Synchronous4_lowered_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous4_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous4_out1 <= Unit_Delay_Enabled_Synchronous4_ectrl;
        end
      end
    end



  assign Unit_Delay_Enabled_Synchronous5_ectrl = (i_en == 1'b0 ? Unit_Delay_Enabled_Synchronous5_out1 :
              Unit_Delay_Enabled_Synchronous4_out1);



  always @(posedge i_clk or negedge i_rst_n)
    begin : Unit_Delay_Enabled_Synchronous5_lowered_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous5_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous5_out1 <= Unit_Delay_Enabled_Synchronous5_ectrl;
        end
      end
    end



  assign Unit_Delay_Enabled_Synchronous6_ectrl = (i_en == 1'b0 ? Unit_Delay_Enabled_Synchronous6_out1 :
              Unit_Delay_Enabled_Synchronous5_out1);



  always @(posedge i_clk or negedge i_rst_n)
    begin : Unit_Delay_Enabled_Synchronous6_lowered_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous6_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous6_out1 <= Unit_Delay_Enabled_Synchronous6_ectrl;
        end
      end
    end



  assign Unit_Delay_Enabled_Synchronous7_ectrl = (i_en == 1'b0 ? Unit_Delay_Enabled_Synchronous7_out1 :
              Unit_Delay_Enabled_Synchronous6_out1);



  always @(posedge i_clk or negedge i_rst_n)
    begin : Unit_Delay_Enabled_Synchronous7_lowered_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous7_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous7_out1 <= Unit_Delay_Enabled_Synchronous7_ectrl;
        end
      end
    end



  assign Unit_Delay_Enabled_Synchronous8_ectrl = (i_en == 1'b0 ? Unit_Delay_Enabled_Synchronous8_out1 :
              Unit_Delay_Enabled_Synchronous7_out1);



  always @(posedge i_clk or negedge i_rst_n)
    begin : Unit_Delay_Enabled_Synchronous8_lowered_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous8_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous8_out1 <= Unit_Delay_Enabled_Synchronous8_ectrl;
        end
      end
    end



  assign Unit_Delay_Enabled_Synchronous9_ectrl = (i_en == 1'b0 ? Unit_Delay_Enabled_Synchronous9_out1 :
              Unit_Delay_Enabled_Synchronous8_out1);



  always @(posedge i_clk or negedge i_rst_n)
    begin : Unit_Delay_Enabled_Synchronous9_lowered_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous9_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous9_out1 <= Unit_Delay_Enabled_Synchronous9_ectrl;
        end
      end
    end



  assign Unit_Delay_Enabled_Synchronous10_ectrl = (i_en == 1'b0 ? Unit_Delay_Enabled_Synchronous10_out1 :
              Unit_Delay_Enabled_Synchronous9_out1);



  always @(posedge i_clk or negedge i_rst_n)
    begin : Unit_Delay_Enabled_Synchronous10_lowered_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous10_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous10_out1 <= Unit_Delay_Enabled_Synchronous10_ectrl;
        end
      end
    end



  assign Unit_Delay_Enabled_Synchronous11_ectrl = (i_en == 1'b0 ? Unit_Delay_Enabled_Synchronous11_out1 :
              Unit_Delay_Enabled_Synchronous10_out1);



  always @(posedge i_clk or negedge i_rst_n)
    begin : Unit_Delay_Enabled_Synchronous11_lowered_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous11_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous11_out1 <= Unit_Delay_Enabled_Synchronous11_ectrl;
        end
      end
    end



  assign Unit_Delay_Enabled_Synchronous12_ectrl = (i_en == 1'b0 ? Unit_Delay_Enabled_Synchronous12_out1 :
              Unit_Delay_Enabled_Synchronous11_out1);



  always @(posedge i_clk or negedge i_rst_n)
    begin : Unit_Delay_Enabled_Synchronous12_lowered_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous12_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous12_out1 <= Unit_Delay_Enabled_Synchronous12_ectrl;
        end
      end
    end



  assign Unit_Delay_Enabled_Synchronous13_ectrl = (i_en == 1'b0 ? Unit_Delay_Enabled_Synchronous13_out1 :
              Unit_Delay_Enabled_Synchronous12_out1);



  always @(posedge i_clk or negedge i_rst_n)
    begin : Unit_Delay_Enabled_Synchronous13_lowered_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous13_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous13_out1 <= Unit_Delay_Enabled_Synchronous13_ectrl;
        end
      end
    end



  assign Unit_Delay_Enabled_Synchronous14_ectrl = (i_en == 1'b0 ? Unit_Delay_Enabled_Synchronous14_out1 :
              Unit_Delay_Enabled_Synchronous13_out1);



  always @(posedge i_clk or negedge i_rst_n)
    begin : Unit_Delay_Enabled_Synchronous14_lowered_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous14_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous14_out1 <= Unit_Delay_Enabled_Synchronous14_ectrl;
        end
      end
    end



  assign Unit_Delay_Enabled_Synchronous15_ectrl = (i_en == 1'b0 ? Unit_Delay_Enabled_Synchronous15_out1 :
              Unit_Delay_Enabled_Synchronous14_out1);



  always @(posedge i_clk or negedge i_rst_n)
    begin : Unit_Delay_Enabled_Synchronous15_lowered_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous15_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous15_out1 <= Unit_Delay_Enabled_Synchronous15_ectrl;
        end
      end
    end



  assign Unit_Delay_Enabled_Synchronous16_ectrl = (i_en == 1'b0 ? Unit_Delay_Enabled_Synchronous16_out1 :
              Unit_Delay_Enabled_Synchronous15_out1);



  always @(posedge i_clk or negedge i_rst_n)
    begin : Unit_Delay_Enabled_Synchronous16_lowered_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous16_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous16_out1 <= Unit_Delay_Enabled_Synchronous16_ectrl;
        end
      end
    end



  assign Unit_Delay_Enabled_Synchronous17_ectrl = (i_en == 1'b0 ? Unit_Delay_Enabled_Synchronous17_out1 :
              Unit_Delay_Enabled_Synchronous16_out1);



  always @(posedge i_clk or negedge i_rst_n)
    begin : Unit_Delay_Enabled_Synchronous17_lowered_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous17_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous17_out1 <= Unit_Delay_Enabled_Synchronous17_ectrl;
        end
      end
    end



  assign Unit_Delay_Enabled_Synchronous18_ectrl = (i_en == 1'b0 ? Unit_Delay_Enabled_Synchronous18_out1 :
              Unit_Delay_Enabled_Synchronous17_out1);



  always @(posedge i_clk or negedge i_rst_n)
    begin : Unit_Delay_Enabled_Synchronous18_lowered_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous18_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous18_out1 <= Unit_Delay_Enabled_Synchronous18_ectrl;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister23_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous18_out1_1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous18_out1_1 <= Unit_Delay_Enabled_Synchronous18_out1;
        end
      end
    end



  assign b_20_out1 = kconst_1 * Unit_Delay_Enabled_Synchronous18_out1_1;



  assign kconst_2 = 16'sb0000000000011101;



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister18_process
      if (i_rst_n == 1'b0) begin
        kconst_3 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_3 <= kconst_2;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister19_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous17_out1_1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous17_out1_1 <= Unit_Delay_Enabled_Synchronous17_out1;
        end
      end
    end



  assign b_19_out1 = kconst_3 * Unit_Delay_Enabled_Synchronous17_out1_1;



  assign kconst_4 = 16'sb1111111111000000;



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister16_process
      if (i_rst_n == 1'b0) begin
        kconst_5 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_5 <= kconst_4;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister17_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous16_out1_1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous16_out1_1 <= Unit_Delay_Enabled_Synchronous16_out1;
        end
      end
    end



  assign b_18_out1 = kconst_5 * Unit_Delay_Enabled_Synchronous16_out1_1;



  assign kconst_6 = 16'sb0000000001111100;



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister14_process
      if (i_rst_n == 1'b0) begin
        kconst_7 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_7 <= kconst_6;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister15_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous15_out1_1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous15_out1_1 <= Unit_Delay_Enabled_Synchronous15_out1;
        end
      end
    end



  assign b_17_out1 = kconst_7 * Unit_Delay_Enabled_Synchronous15_out1_1;



  assign kconst_8 = 16'sb1111111100001110;



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister12_process
      if (i_rst_n == 1'b0) begin
        kconst_9 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_9 <= kconst_8;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister13_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous14_out1_1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous14_out1_1 <= Unit_Delay_Enabled_Synchronous14_out1;
        end
      end
    end



  assign b_16_out1 = kconst_9 * Unit_Delay_Enabled_Synchronous14_out1_1;



  assign kconst_10 = 16'sb0000000111001110;



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister10_process
      if (i_rst_n == 1'b0) begin
        kconst_11 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_11 <= kconst_10;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister11_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous13_out1_1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous13_out1_1 <= Unit_Delay_Enabled_Synchronous13_out1;
        end
      end
    end



  assign b_15_out1 = kconst_11 * Unit_Delay_Enabled_Synchronous13_out1_1;



  assign kconst_12 = 16'sb1111110001011111;



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister8_process
      if (i_rst_n == 1'b0) begin
        kconst_13 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_13 <= kconst_12;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister9_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous12_out1_1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous12_out1_1 <= Unit_Delay_Enabled_Synchronous12_out1;
        end
      end
    end



  assign b_14_out1 = kconst_13 * Unit_Delay_Enabled_Synchronous12_out1_1;



  assign kconst_14 = 16'sb0000100000011000;



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister6_process
      if (i_rst_n == 1'b0) begin
        kconst_15 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_15 <= kconst_14;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister7_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous11_out1_1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous11_out1_1 <= Unit_Delay_Enabled_Synchronous11_out1;
        end
      end
    end



  assign b_13_out1 = kconst_15 * Unit_Delay_Enabled_Synchronous11_out1_1;



  assign kconst_16 = 16'sb1110100010101010;



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister4_process
      if (i_rst_n == 1'b0) begin
        kconst_17 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_17 <= kconst_16;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister5_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous10_out1_1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous10_out1_1 <= Unit_Delay_Enabled_Synchronous10_out1;
        end
      end
    end



  assign b_12_out1 = kconst_17 * Unit_Delay_Enabled_Synchronous10_out1_1;



  assign kconst_18 = 16'sb0111111111111111;



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister2_process
      if (i_rst_n == 1'b0) begin
        kconst_19 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_19 <= kconst_18;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister3_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous9_out1_1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous9_out1_1 <= Unit_Delay_Enabled_Synchronous9_out1;
        end
      end
    end



  assign b_11_out1 = kconst_19 * Unit_Delay_Enabled_Synchronous9_out1_1;



  assign kconst_20 = 16'sb1110100010101010;



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister_process
      if (i_rst_n == 1'b0) begin
        kconst_21 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_21 <= kconst_20;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister1_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous8_out1_1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous8_out1_1 <= Unit_Delay_Enabled_Synchronous8_out1;
        end
      end
    end



  assign b_10_out1 = kconst_21 * Unit_Delay_Enabled_Synchronous8_out1_1;



  assign kconst_22 = 16'sb0000100000011000;



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister36_process
      if (i_rst_n == 1'b0) begin
        kconst_23 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_23 <= kconst_22;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister37_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous7_out1_1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous7_out1_1 <= Unit_Delay_Enabled_Synchronous7_out1;
        end
      end
    end



  assign b_9_out1 = kconst_23 * Unit_Delay_Enabled_Synchronous7_out1_1;



  assign kconst_24 = 16'sb1111110001011111;



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister34_process
      if (i_rst_n == 1'b0) begin
        kconst_25 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_25 <= kconst_24;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister35_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous6_out1_1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous6_out1_1 <= Unit_Delay_Enabled_Synchronous6_out1;
        end
      end
    end



  assign b_8_out1 = kconst_25 * Unit_Delay_Enabled_Synchronous6_out1_1;



  assign kconst_26 = 16'sb0000000111001110;



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister32_process
      if (i_rst_n == 1'b0) begin
        kconst_27 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_27 <= kconst_26;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister33_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous5_out1_1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous5_out1_1 <= Unit_Delay_Enabled_Synchronous5_out1;
        end
      end
    end



  assign b_7_out1 = kconst_27 * Unit_Delay_Enabled_Synchronous5_out1_1;



  assign kconst_28 = 16'sb1111111100001110;



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister30_process
      if (i_rst_n == 1'b0) begin
        kconst_29 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_29 <= kconst_28;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister31_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous4_out1_1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous4_out1_1 <= Unit_Delay_Enabled_Synchronous4_out1;
        end
      end
    end



  assign b_6_out1 = kconst_29 * Unit_Delay_Enabled_Synchronous4_out1_1;



  assign kconst_30 = 16'sb0000000001111100;



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister28_process
      if (i_rst_n == 1'b0) begin
        kconst_31 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_31 <= kconst_30;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister29_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous3_out1_1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous3_out1_1 <= Unit_Delay_Enabled_Synchronous3_out1;
        end
      end
    end



  assign b_5_out1 = kconst_31 * Unit_Delay_Enabled_Synchronous3_out1_1;



  assign kconst_32 = 16'sb1111111111000000;



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister26_process
      if (i_rst_n == 1'b0) begin
        kconst_33 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_33 <= kconst_32;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister27_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous2_out1_1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous2_out1_1 <= Unit_Delay_Enabled_Synchronous2_out1;
        end
      end
    end



  assign b_4_out1 = kconst_33 * Unit_Delay_Enabled_Synchronous2_out1_1;



  assign kconst_34 = 16'sb0000000000011101;



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister24_process
      if (i_rst_n == 1'b0) begin
        kconst_35 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_35 <= kconst_34;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister25_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous1_out1_1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous1_out1_1 <= Unit_Delay_Enabled_Synchronous1_out1;
        end
      end
    end



  assign b_3_out1 = kconst_35 * Unit_Delay_Enabled_Synchronous1_out1_1;



  assign kconst_36 = 16'sb1111111111110000;



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister20_process
      if (i_rst_n == 1'b0) begin
        kconst_37 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_37 <= kconst_36;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : HwModeRegister21_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous_out1_1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous_out1_1 <= Unit_Delay_Enabled_Synchronous_out1;
        end
      end
    end



  assign b_2_out1 = kconst_37 * Unit_Delay_Enabled_Synchronous_out1_1;



  always @(posedge i_clk or negedge i_rst_n)
    begin : PipelineRegister10_process
      if (i_rst_n == 1'b0) begin
        b_2_out1_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          b_2_out1_1 <= b_2_out1;
        end
      end
    end



  assign b_1_out1 = {{13{Unit_Delay_Enabled_Synchronous21_out1[14]}}, {Unit_Delay_Enabled_Synchronous21_out1, 3'b000}};



  always @(posedge i_clk or negedge i_rst_n)
    begin : PipelineRegister11_process
      if (i_rst_n == 1'b0) begin
        b_20_out1_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          b_20_out1_1 <= b_20_out1;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : PipelineRegister9_process
      if (i_rst_n == 1'b0) begin
        b_19_out1_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          b_19_out1_1 <= b_19_out1;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : PipelineRegister8_process
      if (i_rst_n == 1'b0) begin
        b_18_out1_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          b_18_out1_1 <= b_18_out1;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : PipelineRegister7_process
      if (i_rst_n == 1'b0) begin
        b_17_out1_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          b_17_out1_1 <= b_17_out1;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : PipelineRegister6_process
      if (i_rst_n == 1'b0) begin
        b_16_out1_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          b_16_out1_1 <= b_16_out1;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : PipelineRegister5_process
      if (i_rst_n == 1'b0) begin
        b_15_out1_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          b_15_out1_1 <= b_15_out1;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : PipelineRegister4_process
      if (i_rst_n == 1'b0) begin
        b_14_out1_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          b_14_out1_1 <= b_14_out1;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : PipelineRegister3_process
      if (i_rst_n == 1'b0) begin
        b_13_out1_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          b_13_out1_1 <= b_13_out1;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : PipelineRegister2_process
      if (i_rst_n == 1'b0) begin
        b_12_out1_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          b_12_out1_1 <= b_12_out1;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : PipelineRegister1_process
      if (i_rst_n == 1'b0) begin
        b_11_out1_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          b_11_out1_1 <= b_11_out1;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : PipelineRegister_process
      if (i_rst_n == 1'b0) begin
        b_10_out1_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          b_10_out1_1 <= b_10_out1;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : PipelineRegister18_process
      if (i_rst_n == 1'b0) begin
        b_9_out1_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          b_9_out1_1 <= b_9_out1;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : PipelineRegister17_process
      if (i_rst_n == 1'b0) begin
        b_8_out1_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          b_8_out1_1 <= b_8_out1;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : PipelineRegister16_process
      if (i_rst_n == 1'b0) begin
        b_7_out1_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          b_7_out1_1 <= b_7_out1;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : PipelineRegister15_process
      if (i_rst_n == 1'b0) begin
        b_6_out1_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          b_6_out1_1 <= b_6_out1;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : PipelineRegister14_process
      if (i_rst_n == 1'b0) begin
        b_5_out1_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          b_5_out1_1 <= b_5_out1;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : PipelineRegister13_process
      if (i_rst_n == 1'b0) begin
        b_4_out1_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          b_4_out1_1 <= b_4_out1;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : PipelineRegister12_process
      if (i_rst_n == 1'b0) begin
        b_3_out1_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          b_3_out1_1 <= b_3_out1;
        end
      end
    end



  always @(posedge i_clk or negedge i_rst_n)
    begin : delayMatch_process
      if (i_rst_n == 1'b0) begin
        delayMatch_reg[0] <= 31'sb0000000000000000000000000000000;
        delayMatch_reg[1] <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
        end
      end
    end

  assign b_1_out1_1 = delayMatch_reg[1];
  assign delayMatch_reg_next[0] = b_1_out1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];



  assign BodyLSum2_1 = {b_2_out1_1[30], b_2_out1_1};
  assign BodyLSum2_2 = {b_1_out1_1[30], b_1_out1_1};
  assign BodyLSum2_add_temp = BodyLSum2_1 + BodyLSum2_2;
  assign BodyLSum2_out1 = ((BodyLSum2_add_temp[31] == 1'b0) && (BodyLSum2_add_temp[30] != 1'b0) ? 31'sb0111111111111111111111111111111 :
              ((BodyLSum2_add_temp[31] == 1'b1) && (BodyLSum2_add_temp[30] != 1'b1) ? 31'sb1000000000000000000000000000000 :
              $signed(BodyLSum2_add_temp[30:0])));



  assign BodyLSum3_1 = {b_3_out1_1[30], b_3_out1_1};
  assign BodyLSum3_2 = {BodyLSum2_out1[30], BodyLSum2_out1};
  assign BodyLSum3_add_temp = BodyLSum3_1 + BodyLSum3_2;
  assign BodyLSum3_out1 = ((BodyLSum3_add_temp[31] == 1'b0) && (BodyLSum3_add_temp[30] != 1'b0) ? 31'sb0111111111111111111111111111111 :
              ((BodyLSum3_add_temp[31] == 1'b1) && (BodyLSum3_add_temp[30] != 1'b1) ? 31'sb1000000000000000000000000000000 :
              $signed(BodyLSum3_add_temp[30:0])));



  assign BodyLSum4_1 = {b_4_out1_1[30], b_4_out1_1};
  assign BodyLSum4_2 = {BodyLSum3_out1[30], BodyLSum3_out1};
  assign BodyLSum4_add_temp = BodyLSum4_1 + BodyLSum4_2;
  assign BodyLSum4_out1 = ((BodyLSum4_add_temp[31] == 1'b0) && (BodyLSum4_add_temp[30] != 1'b0) ? 31'sb0111111111111111111111111111111 :
              ((BodyLSum4_add_temp[31] == 1'b1) && (BodyLSum4_add_temp[30] != 1'b1) ? 31'sb1000000000000000000000000000000 :
              $signed(BodyLSum4_add_temp[30:0])));



  assign BodyLSum5_1 = {b_5_out1_1[30], b_5_out1_1};
  assign BodyLSum5_2 = {BodyLSum4_out1[30], BodyLSum4_out1};
  assign BodyLSum5_add_temp = BodyLSum5_1 + BodyLSum5_2;
  assign BodyLSum5_out1 = ((BodyLSum5_add_temp[31] == 1'b0) && (BodyLSum5_add_temp[30] != 1'b0) ? 31'sb0111111111111111111111111111111 :
              ((BodyLSum5_add_temp[31] == 1'b1) && (BodyLSum5_add_temp[30] != 1'b1) ? 31'sb1000000000000000000000000000000 :
              $signed(BodyLSum5_add_temp[30:0])));



  assign BodyLSum6_1 = {b_6_out1_1[30], b_6_out1_1};
  assign BodyLSum6_2 = {BodyLSum5_out1[30], BodyLSum5_out1};
  assign BodyLSum6_add_temp = BodyLSum6_1 + BodyLSum6_2;
  assign BodyLSum6_out1 = ((BodyLSum6_add_temp[31] == 1'b0) && (BodyLSum6_add_temp[30] != 1'b0) ? 31'sb0111111111111111111111111111111 :
              ((BodyLSum6_add_temp[31] == 1'b1) && (BodyLSum6_add_temp[30] != 1'b1) ? 31'sb1000000000000000000000000000000 :
              $signed(BodyLSum6_add_temp[30:0])));



  assign BodyLSum7_1 = {b_7_out1_1[30], b_7_out1_1};
  assign BodyLSum7_2 = {BodyLSum6_out1[30], BodyLSum6_out1};
  assign BodyLSum7_add_temp = BodyLSum7_1 + BodyLSum7_2;
  assign BodyLSum7_out1 = ((BodyLSum7_add_temp[31] == 1'b0) && (BodyLSum7_add_temp[30] != 1'b0) ? 31'sb0111111111111111111111111111111 :
              ((BodyLSum7_add_temp[31] == 1'b1) && (BodyLSum7_add_temp[30] != 1'b1) ? 31'sb1000000000000000000000000000000 :
              $signed(BodyLSum7_add_temp[30:0])));



  assign BodyLSum8_1 = {b_8_out1_1[30], b_8_out1_1};
  assign BodyLSum8_2 = {BodyLSum7_out1[30], BodyLSum7_out1};
  assign BodyLSum8_add_temp = BodyLSum8_1 + BodyLSum8_2;
  assign BodyLSum8_out1 = ((BodyLSum8_add_temp[31] == 1'b0) && (BodyLSum8_add_temp[30] != 1'b0) ? 31'sb0111111111111111111111111111111 :
              ((BodyLSum8_add_temp[31] == 1'b1) && (BodyLSum8_add_temp[30] != 1'b1) ? 31'sb1000000000000000000000000000000 :
              $signed(BodyLSum8_add_temp[30:0])));



  assign BodyLSum9_1 = {b_9_out1_1[30], b_9_out1_1};
  assign BodyLSum9_2 = {BodyLSum8_out1[30], BodyLSum8_out1};
  assign BodyLSum9_add_temp = BodyLSum9_1 + BodyLSum9_2;
  assign BodyLSum9_out1 = ((BodyLSum9_add_temp[31] == 1'b0) && (BodyLSum9_add_temp[30] != 1'b0) ? 31'sb0111111111111111111111111111111 :
              ((BodyLSum9_add_temp[31] == 1'b1) && (BodyLSum9_add_temp[30] != 1'b1) ? 31'sb1000000000000000000000000000000 :
              $signed(BodyLSum9_add_temp[30:0])));



  assign BodyLSum10_1 = {b_10_out1_1[30], b_10_out1_1};
  assign BodyLSum10_2 = {BodyLSum9_out1[30], BodyLSum9_out1};
  assign BodyLSum10_add_temp = BodyLSum10_1 + BodyLSum10_2;
  assign BodyLSum10_out1 = ((BodyLSum10_add_temp[31] == 1'b0) && (BodyLSum10_add_temp[30] != 1'b0) ? 31'sb0111111111111111111111111111111 :
              ((BodyLSum10_add_temp[31] == 1'b1) && (BodyLSum10_add_temp[30] != 1'b1) ? 31'sb1000000000000000000000000000000 :
              $signed(BodyLSum10_add_temp[30:0])));



  assign BodyLSum11_1 = {b_11_out1_1[30], b_11_out1_1};
  assign BodyLSum11_2 = {BodyLSum10_out1[30], BodyLSum10_out1};
  assign BodyLSum11_add_temp = BodyLSum11_1 + BodyLSum11_2;
  assign BodyLSum11_out1 = ((BodyLSum11_add_temp[31] == 1'b0) && (BodyLSum11_add_temp[30] != 1'b0) ? 31'sb0111111111111111111111111111111 :
              ((BodyLSum11_add_temp[31] == 1'b1) && (BodyLSum11_add_temp[30] != 1'b1) ? 31'sb1000000000000000000000000000000 :
              $signed(BodyLSum11_add_temp[30:0])));



  assign BodyLSum12_1 = {b_12_out1_1[30], b_12_out1_1};
  assign BodyLSum12_2 = {BodyLSum11_out1[30], BodyLSum11_out1};
  assign BodyLSum12_add_temp = BodyLSum12_1 + BodyLSum12_2;
  assign BodyLSum12_out1 = ((BodyLSum12_add_temp[31] == 1'b0) && (BodyLSum12_add_temp[30] != 1'b0) ? 31'sb0111111111111111111111111111111 :
              ((BodyLSum12_add_temp[31] == 1'b1) && (BodyLSum12_add_temp[30] != 1'b1) ? 31'sb1000000000000000000000000000000 :
              $signed(BodyLSum12_add_temp[30:0])));



  assign BodyLSum13_1 = {b_13_out1_1[30], b_13_out1_1};
  assign BodyLSum13_2 = {BodyLSum12_out1[30], BodyLSum12_out1};
  assign BodyLSum13_add_temp = BodyLSum13_1 + BodyLSum13_2;
  assign BodyLSum13_out1 = ((BodyLSum13_add_temp[31] == 1'b0) && (BodyLSum13_add_temp[30] != 1'b0) ? 31'sb0111111111111111111111111111111 :
              ((BodyLSum13_add_temp[31] == 1'b1) && (BodyLSum13_add_temp[30] != 1'b1) ? 31'sb1000000000000000000000000000000 :
              $signed(BodyLSum13_add_temp[30:0])));



  assign BodyLSum14_1 = {b_14_out1_1[30], b_14_out1_1};
  assign BodyLSum14_2 = {BodyLSum13_out1[30], BodyLSum13_out1};
  assign BodyLSum14_add_temp = BodyLSum14_1 + BodyLSum14_2;
  assign BodyLSum14_out1 = ((BodyLSum14_add_temp[31] == 1'b0) && (BodyLSum14_add_temp[30] != 1'b0) ? 31'sb0111111111111111111111111111111 :
              ((BodyLSum14_add_temp[31] == 1'b1) && (BodyLSum14_add_temp[30] != 1'b1) ? 31'sb1000000000000000000000000000000 :
              $signed(BodyLSum14_add_temp[30:0])));



  assign BodyLSum15_1 = {b_15_out1_1[30], b_15_out1_1};
  assign BodyLSum15_2 = {BodyLSum14_out1[30], BodyLSum14_out1};
  assign BodyLSum15_add_temp = BodyLSum15_1 + BodyLSum15_2;
  assign BodyLSum15_out1 = ((BodyLSum15_add_temp[31] == 1'b0) && (BodyLSum15_add_temp[30] != 1'b0) ? 31'sb0111111111111111111111111111111 :
              ((BodyLSum15_add_temp[31] == 1'b1) && (BodyLSum15_add_temp[30] != 1'b1) ? 31'sb1000000000000000000000000000000 :
              $signed(BodyLSum15_add_temp[30:0])));



  assign BodyLSum16_1 = {b_16_out1_1[30], b_16_out1_1};
  assign BodyLSum16_2 = {BodyLSum15_out1[30], BodyLSum15_out1};
  assign BodyLSum16_add_temp = BodyLSum16_1 + BodyLSum16_2;
  assign BodyLSum16_out1 = ((BodyLSum16_add_temp[31] == 1'b0) && (BodyLSum16_add_temp[30] != 1'b0) ? 31'sb0111111111111111111111111111111 :
              ((BodyLSum16_add_temp[31] == 1'b1) && (BodyLSum16_add_temp[30] != 1'b1) ? 31'sb1000000000000000000000000000000 :
              $signed(BodyLSum16_add_temp[30:0])));



  assign BodyLSum17_1 = {b_17_out1_1[30], b_17_out1_1};
  assign BodyLSum17_2 = {BodyLSum16_out1[30], BodyLSum16_out1};
  assign BodyLSum17_add_temp = BodyLSum17_1 + BodyLSum17_2;
  assign BodyLSum17_out1 = ((BodyLSum17_add_temp[31] == 1'b0) && (BodyLSum17_add_temp[30] != 1'b0) ? 31'sb0111111111111111111111111111111 :
              ((BodyLSum17_add_temp[31] == 1'b1) && (BodyLSum17_add_temp[30] != 1'b1) ? 31'sb1000000000000000000000000000000 :
              $signed(BodyLSum17_add_temp[30:0])));



  assign BodyLSum18_1 = {b_18_out1_1[30], b_18_out1_1};
  assign BodyLSum18_2 = {BodyLSum17_out1[30], BodyLSum17_out1};
  assign BodyLSum18_add_temp = BodyLSum18_1 + BodyLSum18_2;
  assign BodyLSum18_out1 = ((BodyLSum18_add_temp[31] == 1'b0) && (BodyLSum18_add_temp[30] != 1'b0) ? 31'sb0111111111111111111111111111111 :
              ((BodyLSum18_add_temp[31] == 1'b1) && (BodyLSum18_add_temp[30] != 1'b1) ? 31'sb1000000000000000000000000000000 :
              $signed(BodyLSum18_add_temp[30:0])));



  assign BodyLSum19_1 = {b_19_out1_1[30], b_19_out1_1};
  assign BodyLSum19_2 = {BodyLSum18_out1[30], BodyLSum18_out1};
  assign BodyLSum19_add_temp = BodyLSum19_1 + BodyLSum19_2;
  assign BodyLSum19_out1 = ((BodyLSum19_add_temp[31] == 1'b0) && (BodyLSum19_add_temp[30] != 1'b0) ? 31'sb0111111111111111111111111111111 :
              ((BodyLSum19_add_temp[31] == 1'b1) && (BodyLSum19_add_temp[30] != 1'b1) ? 31'sb1000000000000000000000000000000 :
              $signed(BodyLSum19_add_temp[30:0])));



  assign BodyLSum20_1 = {b_20_out1_1[30], b_20_out1_1};
  assign BodyLSum20_2 = {BodyLSum19_out1[30], BodyLSum19_out1};
  assign BodyLSum20_add_temp = BodyLSum20_1 + BodyLSum20_2;
  assign BodyLSum20_out1 = ((BodyLSum20_add_temp[31] == 1'b0) && (BodyLSum20_add_temp[30] != 1'b0) ? 31'sb0111111111111111111111111111111 :
              ((BodyLSum20_add_temp[31] == 1'b1) && (BodyLSum20_add_temp[30] != 1'b1) ? 31'sb1000000000000000000000000000000 :
              $signed(BodyLSum20_add_temp[30:0])));



  assign Unit_Delay_Enabled_Synchronous19_ectrl = (i_en == 1'b0 ? Unit_Delay_Enabled_Synchronous19_out1 :
              Unit_Delay_Enabled_Synchronous18_out1);



  always @(posedge i_clk or negedge i_rst_n)
    begin : Unit_Delay_Enabled_Synchronous19_lowered_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous19_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous19_out1 <= Unit_Delay_Enabled_Synchronous19_ectrl;
        end
      end
    end



  assign b_21_out1 = {{13{Unit_Delay_Enabled_Synchronous19_out1[14]}}, {Unit_Delay_Enabled_Synchronous19_out1, 3'b000}};



  always @(posedge i_clk or negedge i_rst_n)
    begin : delayMatch1_process
      if (i_rst_n == 1'b0) begin
        delayMatch1_reg[0] <= 31'sb0000000000000000000000000000000;
        delayMatch1_reg[1] <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch1_reg[0] <= delayMatch1_reg_next[0];
          delayMatch1_reg[1] <= delayMatch1_reg_next[1];
        end
      end
    end

  assign b_21_out1_1 = delayMatch1_reg[1];
  assign delayMatch1_reg_next[0] = b_21_out1;
  assign delayMatch1_reg_next[1] = delayMatch1_reg[0];



  assign BodyLSum21_1 = {BodyLSum20_out1[30], BodyLSum20_out1};
  assign BodyLSum21_2 = {b_21_out1_1[30], b_21_out1_1};
  assign BodyLSum21_add_temp = BodyLSum21_1 + BodyLSum21_2;
  assign BodyLSum21_out1 = ((BodyLSum21_add_temp[31] == 1'b0) && (BodyLSum21_add_temp[30] != 1'b0) ? 31'sb0111111111111111111111111111111 :
              ((BodyLSum21_add_temp[31] == 1'b1) && (BodyLSum21_add_temp[30] != 1'b1) ? 31'sb1000000000000000000000000000000 :
              $signed(BodyLSum21_add_temp[30:0])));



  assign Unit_Delay_Enabled_Synchronous20_ectrl = (i_en_1 == 1'b0 ? Unit_Delay_Enabled_Synchronous20_out1 :
              BodyLSum21_out1);



  always @(posedge i_clk or negedge i_rst_n)
    begin : Unit_Delay_Enabled_Synchronous20_lowered_process
      if (i_rst_n == 1'b0) begin
        Unit_Delay_Enabled_Synchronous20_out1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Enabled_Synchronous20_out1 <= Unit_Delay_Enabled_Synchronous20_ectrl;
        end
      end
    end



  assign o_data = Unit_Delay_Enabled_Synchronous20_out1;

endmodule  // FIR_compensator

